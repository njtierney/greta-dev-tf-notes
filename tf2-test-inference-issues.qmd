# errors in test_inference.R related to bad MCMC proposals

main issue is that this MCMC should be erroring...but it isn't!

```{r}
devtools::load_all("../greta/")
source(here::here("../greta/", "tests", "testthat", "helpers.R"))
```


# Error 1 - bad mcmc proposals are rejected

# error 2 - we expect this to error but it doesn't

OK so it appears that this might be due to the fact that are we using
single precision, but it looks like the dag defines it as double precision
we need to explore where each dag is defined so we can pass the appropriate
prevision - take a look at where previously on_graph was called in
the TF1 release of greta. Since we don't use on_graph anymore, we need
some way of handling that carefully and appropriately
so take a look at the use of on_graph and the on.exit pattern used to
manage precision

```{r}
# set up for numerical rejection of initial location
x <- rnorm(10000, 1e12, 1)
z <- normal(-1e6, 1e-12)
distribution(x) <- normal(z, 1e12)
m <- model(z, precision = "single")

draws <- mcmc(m,
              chains = 1,
              n_samples = 2,
              warmup = 0,
              verbose = FALSE,
              initial_values = initials(z = 1e60))

draws
```

## error 3 - we expect this to have really bad proposals, but no!

```{r}
# really bad proposals
x <- rnorm(100000, 1e12, 1)
z <- normal(-1e12, 1e-12)
distribution(x) <- normal(z, 1e-12)
m <- model(z, precision = "single")
draws <- mcmc(m, chains = 1, n_samples = 1, warmup = 0, verbose = FALSE)
plot(draws)
```

## error 4 - proposals that are fine, but rejected anyway

```{r}
z <- normal(0, 1)
m <- model(z, precision = "single")
expect_ok(mcmc(m,
               hmc(
                 epsilon = 100,
                 Lmin = 1,
                 Lmax = 1
               ),
               chains = 1,
               n_samples = 5,
               warmup = 0,
               verbose = FALSE
))
```


```{r}
## error 8 - numerical issues are handled in mcmc - does not error
# this should have a cholesky decomposition problem at some point
alpha <- normal(0, 1)
x <- matrix(rnorm(6), 3, 2)
y <- t(rnorm(3))
z <- alpha * x
sigma <- z %*% t(z)
distribution(y) <- multivariate_normal(zeros(1, 3), sigma)
m <- model(alpha)

# running with bursts should error informatively
# expect_snapshot_error(
draws <- mcmc(m, verbose = FALSE)
# )
```


