
```{r}
devtools::load_all(".")
source(here::here("tests", "testthat", "helpers.R"))
```


We get an error for rwmh like so
```{r}
x <- normal(0, 1)
m <- model(x)

# this errors
draws <- mcmc(m,
              sampler = rwmh("normal"),
              n_samples = 100, 
              warmup = 100,
              verbose = FALSE)

```

The error being

```
Error: greta hit a tensorflow error:
Error in py_call_impl(callable,
dots$args, dots$keywords):
RuntimeError: Evaluation error:
ValueError: Cannot reshape a tensor
with 0 elements to shape [1] (1
elements) for '{{node Reshape}} =
Reshape[T=DT_DOUBLE,
Tshape=DT_INT32](Mul, Reshape/shape)'
with input shapes: [0], [1] and with
input tensors computed as partial
shapes: input[1] = [1]. .
```

Minimally, the code to fail is:

```{r}
x <- normal(0, 1)
m <- model(x)
draws <- mcmc(m, sampler = rwmh())
```


So my thought is that there is something the wrong shape or dimension here 
related to rwmh sampler?

We don't get this error with the default sampler, `hmc`.

```{r}
x <- normal(0, 1)
m <- model(x)
draws <- mcmc(m, sampler = hmc())
```



Let's go a journey - first step into mcmc

```{r}
debugonce(mcmc)
x <- normal(0, 1)
m <- model(x)
draws <- mcmc(m, sampler = rwmh())
```

OK so the error occurs here in `sample_carefully`

```{r}
#| eval: false
      result <- cleanly(
        self$tf_evaluate_sample_batch(
          free_state = tensorflow::as_tensor(
            free_state,
            dtype = tf_float()
          ),
          sampler_burst_length = tensorflow::as_tensor(sampler_burst_length),
          sampler_thin = tensorflow::as_tensor(sampler_thin),
          sampler_param_vec = tensorflow::as_tensor(
            sampler_param_vec,
            dtype = tf_float(),
            shape = length(sampler_param_vec)
          )
        )
      )
```

I'll place a browser there and take a look

```{r}
x <- normal(0, 1)
m <- model(x)
draws <- mcmc(m, sampler = rwmh())
```

OK and because the code uses `tf_function` it needs to be undone there somehow

Breaking down this code

```{r}
result <- cleanly(
        self$tf_evaluate_sample_batch(
          free_state = tensorflow::as_tensor(
            free_state,
            dtype = tf_float()
          ),
          sampler_burst_length = tensorflow::as_tensor(sampler_burst_length),
          sampler_thin = tensorflow::as_tensor(sampler_thin),
          sampler_param_vec = tensorflow::as_tensor(
            sampler_param_vec,
            dtype = tf_float(),
            shape = length(sampler_param_vec)
          )
        )
      )
```


The outputs of the `free_state`, `sampler_burst_length`, and `sampler_thin`, `sampler_param_vec` are:

```{r}
free_state
sampler_burst_length
sampler_thin
sampler_param_vec
```

```
Browse[2]> free_state
     all_forward_variable_1
[1,]             0.04096190
[2,]             0.01090323
[3,]            -0.15063224
[4,]             0.08087937
Browse[2]> sampler_burst_length
[1] 3
Browse[2]> sampler_thin
[1] 1
Browse[2]> sampler_param_vec
rwmh_epsilon rwmh_diag_sd 
         0.1          1.0 
```

And what does this comparative part look like in `hmc()`?

```{r}
x <- normal(0, 1)
m <- model(x)
draws <- mcmc(m, sampler = hmc())
```

```{r}
free_state
sampler_burst_length
sampler_thin
sampler_param_vec
```

```
Browse[2]> free_state
     all_forward_variable_1
[1,]             0.13124380
[2,]            -0.12720201
[3,]            -0.15659195
[4,]             0.08557503
Browse[2]> sampler_burst_length
[1] 3
Browse[2]> sampler_thin
[1] 1
Browse[2]> sampler_param_vec
      hmc_l hmc_epsilon hmc_diag_sd 
        6.0         0.1         1.0 
```

OK so it's not going to awry at that point...

Overall, `tf_evaluate_sample_batch` is a tf function, written like so:

```{r}
#| eval: false
self$tf_evaluate_sample_batch <- tensorflow::tf_function(
        f = self$define_tf_draws,
        input_signature = list(
          # free state
          tf$TensorSpec(shape = list(NULL, self$n_free),
                        dtype = tf_float()),
          # sampler_burst_length
          tf$TensorSpec(shape = list(),
                        dtype = tf$int32),
          # sampler_thin
          tf$TensorSpec(shape = list(),
                        dtype = tf$int32),
          # sampler_param_vec
          tf$TensorSpec(shape = list(
            length(
              unlist(
                self$sampler_parameter_values()
                )
              )
            ),
                        dtype = tf_float())
        )
      )
```


I can't seem to work out how to remove the `tf_function` part of so we can debug
it.

I tried to just use `self$define_tf_draws` as it's own function, defining
the inputs, `free_state` etc, as either the named variables, or as the Tensors
above, but I think I'm missing something. Not sure how to proceed further from here.


Note that we get the same error for the sampler, `slice` as well
